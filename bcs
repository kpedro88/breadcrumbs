#!/usr/bin/env python3

import sys, os, json, time, glob, shutil, re, subprocess
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter, RawTextHelpFormatter, RawDescriptionHelpFormatter

# convenience definition
# (from ConfigArgParse)
class ArgumentDefaultsRawHelpFormatter(
    ArgumentDefaultsHelpFormatter,
    RawTextHelpFormatter,
    RawDescriptionHelpFormatter):
    """HelpFormatter that adds default values AND doesn't do line-wrapping"""
pass

######################
# internal functions
######################

# location of json file
bcsfilename = os.path.expanduser('~/.breadcrumbs')

# check against list of known/allowed keys
# type is not used as a key, because not guaranteed to be unique
# TODO: implement a better abstraction i.e. key class that handles various operations/checks
#       (as opposed to various if statements strewn around now)
def bcs_check_key(key):
    bcskeys = set(["num","rnum","dir","date","label"])
    if key not in bcskeys:
        raise ValueError("No key '"+key+"'")

# check if dir arg is number or label
# TODO: allow mixing num, rnum, label in list of dirs
def bcs_num_or_label(args):
    # handle negative case
    def smart_isdigit(arg):
        start = 1 if arg[0]=='-' else 0
        return arg[start:].isdigit()

    key = None
    if args.dir is not None:
        if isinstance(args.dir,list):
            if all(smart_isdigit(d) for d in args.dir):
                args.dir = [int(d) for d in args.dir]
                all_neg = all(d<0 for d in args.dir)
                all_pos = all(d>=0 for d in args.dir)
                if all_pos:
                    key = "num"
                elif all_neg:
                    key = "rnum"
                else:
                    raise ValueError("Can't mix pos and neg indices in list of dirs: "+','.join(args.dir))
            elif all(not d.isdigit() for d in args.dir):
                key = "label"
            else:
                raise ValueError("Can't mix num and label in list of dirs: "+','.join(args.dir))
        else:
            if smart_isdigit(args.dir):
                args.dir = int(args.dir)
                if args.dir<0:
                    key = "rnum"
                else:
                    key = "num"
            else:
                key = "label"
    return key
        
# make dict sorted by value for specified key
def bcs_list_sort(bcslist,key):
    bcs_check_key(key)
    bcsdict = {}
    for bcsitem in bcslist:
        bcsdict[bcsitem[key]] = bcsitem
    return bcsdict
    
# resort a dict (or sort by num)
def bcs_dict_sort(bcsdict,key):
    bcs_check_key(key)
    if key.endswith("num"):
        counter = 0 if key=="num" else -1
        bcsdict = bcs_dict_sort(bcsdict,"date")
        for bcskey in sorted(bcsdict,reverse=(key=="num")):
            bcsdict[counter] = bcsdict.pop(bcskey)
            counter += 1 if key=="num" else -1
    else:
        bcsdict = { bcsdict[bcskey][key] : bcsval for bcskey,bcsval in bcsdict.items() }
    
    return bcsdict

# in case file doesn't exist or needs to be reset
def bcs_create_default_file():
    with open(bcsfilename,'w') as bcsfile:
        bcsfile.write('[]')

# create backup without overwriting
# .breadcrumbs.bak is the latest backup
def bcs_create_backup_file():
    bakname = '.breadcrumbs.bak'
    bakfilename = os.path.expanduser('~/'+bakname)
    backups = glob.glob(bakfilename+'*')
    # move old backup to .breadcrumbs.bakN
    if bakfilename in backups:
        counter = len(backups)
        shutil.copy2(bakfilename,bakfilename+str(counter))
    # actually make the backup
    shutil.copy2(bcsfilename,bakfilename)

# load dict from file and sort
def bcs_dict_load(key="num"):
    bcs_check_key(key)
    
    if not os.path.isfile(bcsfilename):
        bcs_create_default_file()
    
    with open(bcsfilename,'r') as bcsfile:
        bcslist = json.load(bcsfile)
    
    # num is a derived key, based on date ordering
    do_num = False
    num_key = key
    if key.endswith("num"):
        key = "date"
        do_num = True
    
    bcsdict = bcs_list_sort(bcslist,key)
        
    # replace date w/ num as key
    if do_num:
        bcsdict = bcs_dict_sort(bcsdict,num_key)
        
    return bcsdict

def bcs_check_label(bcsdict,label,force):
    bcsdict = bcs_dict_sort(bcsdict,"label")
    if label in bcsdict:
        if not force:
            raise RuntimeError("Label "+label+" already in use (use -f to override)")
        else:
            # reset label to default value
            bcsdict[label]["label"] = bcsdict[label]["dir"]            

# compute blocked dir
def bcs_get_block(dir,block):
    if block<0: tmp = ""
    # trailing slash important for check_block using startswith
    elif block==0: tmp = dir+"/"
    else:
        tmp = "/".join(dir.split("/")[:-block])
        if len(tmp)==0: print("Block level too high, no block will be applied")
        else: tmp = tmp+"/"
    return tmp

# check if this dir is blocked by any existing entry
def bcs_check_block(bcsdict,dir):
    # dirs cannot block themselves
    tdir = dir+"/"
    return any([tdir.startswith(bcsitem[1]["blocked"]) for bcsitem in bcsdict.items() if bcsitem[1]["dir"]!=dir and len(bcsitem[1]["blocked"])>0])

# output dict to file
def bcs_dict_dump(bcsdict):
    # convert dict back to list
    bcslist = [bcsitem[1] for bcsitem in bcsdict.items()]
    with open(bcsfilename,'w') as bcsfile:
        json.dump(bcslist, bcsfile)

# string representations of properties
def bcs_repr(bcsitem, prop):
    if prop in ["dir","env","blocked"]: return bcsitem[prop]
    elif prop=="date": return time.ctime(bcsitem[prop])
    elif prop=="label": return '""' if not bcsitem[prop] or bcsitem[prop]==bcsitem["dir"] else bcsitem[prop]
    elif prop=="type": return '""' if not bcsitem[prop] else bcsitem[prop]
    elif prop=="block": return str(bcsitem["block"])

def bcs_list_some(bcsdict, args):
    removed = []
    for bcskey in bcsdict.keys():
        bcsval = bcsdict[bcskey]
        if (args.type and bcsval["type"]==args.type) or \
           (args.nonexistent and not os.path.isdir(bcsval["dir"])) or \
           (args.blocked and bcs_check_block(bcsdict,bcsval["dir"])):
                removed.append(bcskey)
    removed_dict = dict([(bcskey,bcsval) for bcskey,bcsval in bcsdict.items() if bcskey in removed])
    return removed_dict

# print items in dict, w/ format (long):
# N: dir    (date    label   type)
def bcs_print_dict(bcsdict,long=False,reverse=False):
    if len(bcsdict)==0: return
    # make copy w/ printable values in order
    bcsdict_rows = [[str(bcskey),
                bcs_repr(bcsval,"dir"),
                bcs_repr(bcsval,"date"),
                bcs_repr(bcsval,"label"),
                bcs_repr(bcsval,"type")] for bcskey,bcsval in sorted(bcsdict.items(),reverse=reverse)]
    # transpose to find max length for each column
    column_lengths = [max(len(row[i]) for row in bcsdict_rows) for i in range(5)]
    for row in bcsdict_rows:
        line = ""
        line += "{0:>{1}}:".format(row[0],column_lengths[0])
        line += " {0:<{1}}".format(row[1],column_lengths[1])
        if long:
            line += "  {0:<{1}}".format(row[2],column_lengths[2])
            line += "  {0:<{1}}".format(row[3],column_lengths[3])
            line += "  {0:<{1}}".format(row[4],column_lengths[4])
        print(line)

def bcs_check_apptainer(adir):
    result = re.search("CMSSW_[0-9]*_[0-9]*_",adir)
    if result is None:
        return None

    # get SCRAM_ARCH
    adirbase = adir[:]
    slash = adir.find("/", result.end())
    if slash>=0:
        adirbase = adir[:slash]
    scram_paths = glob.glob(adirbase+"/lib/*")
    if len(scram_paths)==0:
        print("Can't find SCRAM_ARCH for dir {}".format(adirbase))
        return None
    scram_path = scram_paths[0]
    scram_arch = scram_path.split("/")[-1]
    scram_os = scram_arch.split("_")[0]

    # map known SCRAM_ARCH values to OS numbers
    # (explicit map rather than parsing in case of weird values, future changes in # digits, etc.)
    SCRAM_to_OS = {
        "slc5": 5,
        "slc6": 6,
        "slc7": 7,
        "cc8": 8,
        "cs8": 8,
        "el8": 8,
        "el9": 9,
    }

    if scram_os not in SCRAM_to_OS:
        print("Unknown OS for SCRAM_ARCH {}".format(scram_arch))
        return None
    CMSSW_os = SCRAM_to_OS[scram_os]

    # always use benv: automatically uses apptainer if current OS is different from CMSSW OS
    return "eval `benv --os {}`".format(CMSSW_os)

######################
# external functions
######################

def bcs_add(args):
    # check backup first
    if args.backup:
        bcs_create_backup_file()
    bcsdict = bcs_dict_load()
    # ensure labels are unique
    if args.label is not None:
        bcs_check_label(bcsdict,args.label,args.force)
    # add entry (use pwd by default)
    if args.dir is None:
        args.dir = os.getcwd()
    bcsdict = bcs_dict_sort(bcsdict,"dir")
    if args.dir in bcsdict and not args.force:
        print("Dir "+args.dir+" already in bcs, not updating without -f")
        return
    if bcs_check_block(bcsdict,args.dir) and not args.force:
        print("Dir "+args.dir+" is blocked, not adding without -f")
        return
    # automatic environment setting
    if args.env is None and not args.no_auto_env:
        if "CMSSW" in args.dir:
            args.env = bcs_check_apptainer(args.dir)
    bcsdict[args.dir] = {
        "dir": args.dir,
        "label": args.label if args.label is not None else args.dir,
        "type": args.type if args.type is not None else "",
        "date": time.time(),
        "env": args.env if args.env is not None else "",
        "block": args.block,
        "blocked": bcs_get_block(args.dir, args.block),
    }
    # check for too high block
    if bcsdict[args.dir]["block"]>0 and len(bcsdict[args.dir]["blocked"])==0: bcsdict[args.dir]["block"] = -1
    bcs_dict_dump(bcsdict)

def bcs_set(args):
    if args.dir is None:
        raise ValueError("Must specify # or label of directory")
    # check backup first
    if args.backup:
        bcs_create_backup_file()
    bcsdict = bcs_dict_load()
    # ensure labels are unique
    if args.label is not None:
        bcs_check_label(bcsdict,args.label,args.force)
    # update label and/or type
    key = bcs_num_or_label(args)
    bcsdict = bcs_dict_sort(bcsdict,key)
    if args.dir in bcsdict:
        if args.label is not None:
            bcsdict[args.dir]["label"] = args.label
        if args.type is not None:
            bcsdict[args.dir]["type"] = args.type
        if args.env is not None:
            bcsdict[args.dir]["env"] = args.env
        if args.block is not None:
            bcsdict[args.dir]["block"] = args.block
            bcsdict[args.dir]["blocked"] = bcs_get_block(bcsdict[args.dir]["dir"], args.block)
            # check for too high block
            if bcsdict[args.dir]["block"]>0 and len(bcsdict[args.dir]["blocked"])==0: bcsdict[args.dir]["block"] = -1
        bcs_dict_dump(bcsdict)
    else:
        raise ValueError("No item "+str(args.dir))

def bcs_list(args):
    # print name and optionally extra info for specific dir
    if args.dir is not None:
        key = bcs_num_or_label(args)
        bcsdict = bcs_dict_load(key)
        bcsitem = bcsdict[args.dir]
        if args.all:
            line = ""
            for prop in sorted(bcsitem.keys()):
                line += prop+": "+bcs_repr(bcsitem,prop)+"\n"
            print(line[:-1])
        else:
            print(bcsitem["dir"])
    # default: print all, w/ format
    else:
        bcsdict = bcs_dict_load("rnum" if args.reverse else "num")
        # if only listing nonexistent dirs, remove existent dirs from dict first
        if args.type or args.nonexistent or args.blocked:
            bcsdict = bcs_list_some(bcsdict,args)
            if len(bcsdict)==0:
                return
        bcs_print_dict(bcsdict,args.long,args.reverse)
    
def bcs_rm(args):
    # check backup first
    if args.backup:
        bcs_create_backup_file()
    # remove by num or label
    if len(args.dir)>0:
        if not isinstance(args.dir,list):
            args.dir = [args.dir]
        key = bcs_num_or_label(args)
        bcsdict = bcs_dict_load(key)
        removed = {}
        for d in args.dir:
            if d in bcsdict:
                removed[d] = bcsdict[d]
                bcsdict.pop(d)
        if args.verbose: bcs_print_dict(removed,reverse=(key=="rnum"))
        bcs_dict_dump(bcsdict)
    # remove many by type, or any nonexistent, or any blocked
    elif args.type or args.nonexistent or args.blocked:
        bcsdict = bcs_dict_load("rnum" if args.reverse else "num")
        removed = bcs_list_some(bcsdict,args)
        # remove all keys at once, because two dirs could block each other
        for key in removed:
            bcsdict.pop(key)
        if args.verbose: bcs_print_dict(removed,reverse=args.reverse)
        bcs_dict_dump(bcsdict)
    # remove all (clear)
    elif args.all:
        if args.verbose:
            bcsdict = bcs_dict_load("rnum" if args.reverse else "num")
            bcs_print_dict(bcsdict,reverse=args.reverse)
        bcs_create_default_file()

def bcs_update(args):
    # check backup first
    if args.backup:
        bcs_create_backup_file()
    bcsdict = bcs_dict_load()
    new_properties = {
        "env": "",
        "block": -1,
        "blocked": "",
    }
    for bcskey in bcsdict.keys():
        for prop in new_properties:
            if prop not in bcsdict[bcskey]:
                bcsdict[bcskey][prop] = new_properties[prop]
        if "CMSSW" in bcsdict[bcskey]["dir"]:
            bcsdict[bcskey]["env"] = bcs_check_apptainer(bcsdict[bcskey]["dir"])
    bcs_dict_dump(bcsdict)

def bcs_cd(args):
    key = bcs_num_or_label(args)
    bcsdict = bcs_dict_load(key)
    bcsitem = bcsdict[args.dir]
    line = 'cd "'+bcsitem["dir"]+'"'
    if not args.go and len(bcsitem["env"])>0:
        env_str = bcsitem["env"]
        if len(args.run)>0:
            env_str = env_str.replace("benv", "benv --run "+args.run) if "benv" in env_str else env_str+" "+args.run
        line += " && "+env_str
    print(line)

######################
# main function
######################

def bcs(argv=None):
    if argv is None: argv = sys.argv[1:]
    
    # top-level parser
    parser = ArgumentParser(formatter_class=ArgumentDefaultsRawHelpFormatter)
    subparsers = parser.add_subparsers()
    
    # parser for add
    parser_add = subparsers.add_parser("add")
    parser_add.add_argument("dir", metavar="dir", type=str, nargs='?', help="name of directory to add (if not pwd)")
    parser_add.add_argument("-l", "--label", dest="label", type=str, help="label for directory to add (optional)")
    parser_add.add_argument("-t", "--type", dest="type", type=str, help="type for directory to add (optional)")
    parser_add.add_argument("-e", "--env", dest="env", type=str, help="env command for directory to add (optional)")
    parser_add.add_argument("-E", "--no-auto-env", dest="no_auto_env", action="store_true", help="disable automatic env determination")
    parser_add.add_argument("-k", "--block", dest="block", type=int, default=-1, help="block level (optional)")
    parser_add.add_argument("-f", "--force", dest="force", action="store_true", help="force update of already-used label or directory")
    parser_add.set_defaults(func=bcs_add)

    # parser for set
    parser_set = subparsers.add_parser("set")
    parser_set.add_argument("dir", metavar="dir", type=str, nargs='?', help="# or label of directory to update")
    parser_set.add_argument("-l", "--label", dest="label", type=str, help="label for directory to update (optional)")
    parser_set.add_argument("-t", "--type", dest="type", type=str, help="type for directory to update (optional)")
    parser_set.add_argument("-e", "--env", dest="env", type=str, help="env command for directory to update (optional)")
    parser_set.add_argument("-k", "--block", dest="block", type=int, help="block level (optional)")
    parser_set.add_argument("-f", "--force", dest="force", action="store_true", help="force update of already-used label")
    parser_set.set_defaults(func=bcs_set)

    # parser for list
    parser_list = subparsers.add_parser("list")
    parser_list.add_argument("dir", metavar="dir", type=str, nargs='?', help="# or label of directory to list (lists all by default)")
    parser_list.add_argument("-a", "--all", dest="all", action="store_true", help="list all properties for directory")
    parser_list.add_argument("-l", "--long", dest="long", action="store_true", help="use long listing (dates, labels, types)")
    parser_list.add_argument("-r", "--reverse", dest="reverse", action="store_true", help="use reverse ordering w/ negative indices when listing all")
    group_list = parser_list.add_mutually_exclusive_group(required=False)
    group_list.add_argument("-t", "--type", dest="type", type=str, help="list all of specified type")
    group_list.add_argument("-n", "--nonexistent", dest="nonexistent", action="store_true", help="list only nonexistent directories")
    group_list.add_argument("-k", "--blocked", dest="blocked", action="store_true", help="list only blocked directories")
    parser_list.set_defaults(func=bcs_list)

    # parser for rm
    parser_rm = subparsers.add_parser("rm")
    parser_rm.add_argument("-v", "--verbose", dest="verbose", action="store_true", help="print removed directory(s)")
    parser_rm.add_argument("-r", "--reverse", dest="reverse", action="store_true", help="use reverse ordering w/ negative indices for verbose")
    group_rm = parser_rm.add_mutually_exclusive_group(required=True)
    group_rm.add_argument("dir", metavar="dir", type=str, nargs='*', help="#(s) or label(s) of directory(s) to remove from list", default=[])
    group_rm.add_argument("-t", "--type", dest="type", type=str, help="remove all of specified type")
    group_rm.add_argument("-n", "--nonexistent", dest="nonexistent", action="store_true", help="remove nonexistent directories")
    group_rm.add_argument("-k", "--blocked", dest="blocked", action="store_true", help="remove blocked directories")
    group_rm.add_argument("-a", "--all", dest="all", action="store_true", help="remove all")
    parser_rm.set_defaults(func=bcs_rm)

    # parse for cd
    parser_cd = subparsers.add_parser("cd")
    parser_cd.add_argument("dir", metavar="dir", type=str, nargs='?', help="# or label of directory to cd")
    parser_cd.add_argument("-g", "--go", dest="go", action="store_true", help="go to directory without setting env")
    parser_cd.add_argument("-r", "--run", dest="run", type=str, help="command to run")
    parser_cd.set_defaults(func=bcs_cd)

    # parser for update
    parser_update = subparsers.add_parser("update")
    parser_update.set_defaults(func=bcs_update)

    # all modifying operations can make a backup
    for subp in [parser_add,parser_set,parser_rm,parser_update]:
        subp.add_argument("-b", "--backup", dest="backup", action="store_true", help="make backup before changes")

    # parse and run
    args = parser.parse_args(args=argv)
    args.func(args)

if __name__ == "__main__":
    bcs()
